Time Complexity

"""
TASK 0:
What is the first record of texts and what is the last record of calls?
Print messages:
"First record of texts, <incoming number> texts <answering number> at time <time>"
"Last record of calls, <incoming number> calls <answering number> at time <time>, lasting <during> seconds"
"""
	
	Line 24 Constant Time O(1)
	
	Line 27 Constant Time O(1)
	
	Line 29 Constant Time O(1)

	Line 31 - 33  Constant Time O(1) + O(1) + O(1) = O(1)
	
	Line 35  Constant Time O(1)

	Line 37 - 40   Constant Time O(1) +  O(1)  + O(1) + O(1) = O(1) 	
	
	Line 43 -44  Constant Time O(1) + O(1) = 0(1) 

Total =   O(1) +  O(1)  + O(1) + O(1) + O(1) +  O(1)  + O(1) 
	  = O(1) 	


"""
TASK 1:
How many different telephone numbers are there in the records? 
Print a message:
"There are <count> different telephone numbers in the records."
"""

def get_different_phone_numbers(list):     
    diff_list = set()              //O(1)
    first_column = 0			   //O(1)	
    second_column = 1			   //O(1)
    i = 0						   //O(1)
    while len(list)>i:									
        diff_list.add(list[i][first_column]) 
        diff_list.add(list[i][second_column])			
        i+=1								
    return diff_list						//O(3n + 5)

diff_list = get_different_phone_numbers(texts) // O(1)
diff_phone_numbers_count = len(diff_list)  //O(1)
print("There are "+ str(diff_phone_numbers_count) +" different telephone numbers in the records") //O(1)

Total O(3n + 8) = O(n)




"""
TASK 2: Which telephone number spent the longest time on the phone
during the period? Don't forget that time spent answering a call is
also time spent on the phone.
Print a message:
"<telephone number> spent the longest time, <total time> seconds, on the phone during 
September 2016.".
"""

def check_max_value(phone_dict):
    max_duration=0                  
    phone_number = ''               

    for key in phone_dict:          
        if max_duration < phone_dict[key]:
            max_duration = phone_dict[key]
            phone_number = key
                                            

    return key, max_duration                                                 #O(3n + 3)

phone_dict = {}                                                          #O(1)
for key in calls:                                                        #O(n)    
    phone_dict[key[0]] = 0

for key in calls:                                                        #O(2n) 
    phone_dict[key[0]] = phone_dict[key[0]] + int(key[3])

phone_number, max_duration = check_max_value(phone_dict)                 #O(3n + 3) + O(1)



print(phone_number+" spent the longest time, " +str(max_duration) +" seconds, on the phone during September 2016.")     #O(1)

Total =  O(1) +  O(n) + O(2n) + O(3n + 3) + O(1)
 O(n) + O(2n) + O(3n + 3) + O(5)
 O(5n + 8) = 0(n)
 
